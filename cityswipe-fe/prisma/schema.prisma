// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id               String         @id @unique
  name             String?
  username         String?
  email            String         @unique
  stripeCustomerId String?        @unique
  Subscription     Subscription?
  profileImg       String?

  Matchs           Match[]
  QuizAnswers      QuizAnswer[]
  Itinerarys       Itinerary[]

  createdAt        DateTime       @default(now())
  updatedAt        DateTime?       @updatedAt
}

model Subscription {
  stripeSubscriptionId String?  
  stripeCustomerId     String?
  interval             String
  planId               String?
  status               String
  username             String?
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime? @updatedAt
  user                 User?    @relation(fields: [userId], references: [id])
  userId               String @id  @unique
}

model Match {
  id              String   @id @default(uuid())
  username        String?
  city            String
  country         String
  compatibility   Float
  budget          Int?
  illustration    String
  description     String

  pros            String[]
  cons            String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?  @relation(fields: [userId], references: [id])
  userId String
}

model QuizAnswer {
  id              String   @id @default(uuid())
  a1              String?
  a2              String?
  a3              String?
  a4              String?
  a5              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?  @relation(fields: [userId], references: [id])
  userId String
}

model Itinerary {
  id              String   @id @default(uuid())
  username        String?
  blockNum        Int?
  type            String?
  text            String?
  props           Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?  @relation(fields: [userId], references: [id])
  userId String
}

model QuizGifs {
  id              String   @id @default(uuid())
  query           String?
  url             String?
}




